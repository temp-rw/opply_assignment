# Generated by Django 4.0.5 on 2022-07-01 18:36

import django.contrib.postgres.fields.citext
import django.utils.timezone
from django.db import migrations, models

import base.db.utils
import iam.managers
from iam.migrations.commands.commands import enable_citext_extention


class Migration(migrations.Migration):
    initial = True

    dependencies = [("auth", "0012_alter_user_first_name_max_length")]

    operations = [
        enable_citext_extention(),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "uuid",
                    models.CharField(
                        default=base.db.utils.generate_uuid,
                        editable=False,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="uuid",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
                ("name", django.contrib.postgres.fields.citext.CICharField(max_length=256)),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "uuid",
                    models.CharField(
                        default=base.db.utils.generate_uuid,
                        editable=False,
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="uuid",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created at")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated at")),
                ("username", models.CharField(max_length=50, unique=True)),
                ("first_name", models.CharField(max_length=50, verbose_name="first name")),
                ("last_name", models.CharField(max_length=50, verbose_name="last name")),
                ("email", django.contrib.postgres.fields.citext.CIEmailField(max_length=254, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                ("role", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="iam.role")),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"verbose_name": "user", "verbose_name_plural": "users", "abstract": False},
            managers=[("objects", iam.managers.UserManager())],
        ),
    ]
